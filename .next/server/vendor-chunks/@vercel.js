"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/kv/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@vercel/kv/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelKV: () => (/* binding */ VercelKV),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   kv: () => (/* binding */ kv)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n// src/index.ts\n\nvar _kv = null;\nprocess.env.UPSTASH_DISABLE_TELEMETRY = \"1\";\nvar VercelKV = class extends _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis {\n    // This API is based on https://github.com/redis/node-redis#scan-iterator which is not supported in @upstash/redis\n    /**\n   * Same as `scan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *scanIterator(options) {\n        let cursor = \"0\";\n        let keys;\n        do {\n            [cursor, keys] = await this.scan(cursor, options);\n            for (const key of keys){\n                yield key;\n            }\n        }while (cursor !== \"0\");\n    }\n    /**\n   * Same as `hscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *hscanIterator(key, options) {\n        let cursor = \"0\";\n        let items;\n        do {\n            [cursor, items] = await this.hscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== \"0\");\n    }\n    /**\n   * Same as `sscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *sscanIterator(key, options) {\n        let cursor = \"0\";\n        let items;\n        do {\n            [cursor, items] = await this.sscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== \"0\");\n    }\n    /**\n   * Same as `zscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *zscanIterator(key, options) {\n        let cursor = \"0\";\n        let items;\n        do {\n            [cursor, items] = await this.zscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== \"0\");\n    }\n};\nfunction createClient(config) {\n    return new VercelKV({\n        // The Next.js team recommends no value or `default` for fetch requests's `cache` option\n        // upstash/redis defaults to `no-store`, so we enforce `default`\n        cache: \"default\",\n        enableAutoPipelining: true,\n        ...config\n    });\n}\nvar src_default = new Proxy({}, {\n    get (target, prop, receiver) {\n        if (prop === \"then\" || prop === \"parse\") {\n            return Reflect.get(target, prop, receiver);\n        }\n        if (!_kv) {\n            if (!process.env.KV_REST_API_URL || !process.env.KV_REST_API_TOKEN) {\n                throw new Error(\"@vercel/kv: Missing required environment variables KV_REST_API_URL and KV_REST_API_TOKEN\");\n            }\n            console.warn('\\x1b[33m\"The default export has been moved to a named export and it will be removed in version 1, change to import { kv }\\x1b[0m\"');\n            _kv = createClient({\n                url: process.env.KV_REST_API_URL,\n                token: process.env.KV_REST_API_TOKEN\n            });\n        }\n        return Reflect.get(_kv, prop);\n    }\n});\nvar kv = new Proxy({}, {\n    get (target, prop) {\n        if (!_kv) {\n            if (!process.env.KV_REST_API_URL || !process.env.KV_REST_API_TOKEN) {\n                throw new Error(\"@vercel/kv: Missing required environment variables KV_REST_API_URL and KV_REST_API_TOKEN\");\n            }\n            _kv = createClient({\n                url: process.env.KV_REST_API_URL,\n                token: process.env.KV_REST_API_TOKEN\n            });\n        }\n        return Reflect.get(_kv, prop);\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/kv/dist/index.js\n");

/***/ })

};
;